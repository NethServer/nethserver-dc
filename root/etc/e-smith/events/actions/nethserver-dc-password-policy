#!/usr/bin/perl

#
# Copyright (C) 2016 Nethesis srl
#
# --- 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License or more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA
#

# Samba 4 can't set password policies for specific users.
# Password policies will be applied to all users

use strict;
use esmith::ConfigDB;

my $event = shift || die "Event name argument missing.";
my $userName = shift || '';
my $PassExpires = shift || 'yes';
my @users;

my $errors = 0;

my %conf = ();
my $db = esmith::ConfigDB->open_ro();

my $policy = $db->get('passwordstrength');
if($policy) {
    %conf = $policy->props();
} else {
    die "[ERROR] No passwordstrength configuration found!\n";
}

my $scmd = "/usr/bin/systemd-run -M nsdc -q -t /usr/bin/samba-tool";

if (($userName =~ /@/) && ($PassExpires eq 'no')) {
    my $ldapAccount = (split(/@/,$userName))[0];
    if( getpwnam($userName)) {
        my $cmd = "$scmd user setexpiry $ldapAccount --noexpiry";
        system($cmd);
    }
} 

if($conf{'PassExpires'} ne 'no') {
    my $min = $conf{"MinPassAge"} || '0';
    my $max = $conf{"MaxPassAge"} || '180';
    my $cmd =  "$scmd domain passwordsettings set --min-pwd-age=$min --max-pwd-age=$max";
    system($cmd);
    my $out = `$scmd domain passwordsettings show | grep "Minimum password age" | cut -d: -f2`;
    if ($out !~ /$min/) {
        warn "[ERROR] Cannot set MinPassAge\n";
        $errors ++;	    
    }
    $out = `$scmd domain passwordsettings show | grep "Maximum password age" | cut -d: -f2`;
    if ($out !~ /$max/) {
        warn "[ERROR] Cannot set MaxPassAge\n";
        $errors ++;	    
    }
} else {
    my $cmd = "$scmd domain passwordsettings set --min-pwd-age=0 --max-pwd-age=0";
    system($cmd);
    my $out = `$scmd domain passwordsettings show | grep "Minimum password age" | cut -d: -f2`;
    if (int($out) > 0) {
        warn "[ERROR] Cannot disable MinPassAge\n";
        $errors ++;
    }
    $out = `$scmd domain passwordsettings show | grep "Maximum password age" | cut -d: -f2`;
    if (int($out)) {
        warn "[ERROR] Cannot disable MaxPassAge\n";
        $errors ++;
    }

}

my $cmd = '';
if($conf{'Users'} eq 'strong') {
    $cmd = "$scmd domain passwordsettings set --complexity=on --history-length=default";
} else {
    $cmd = "$scmd domain passwordsettings set --complexity=off --history-length=0";
}
my $out = `$cmd`;
if ($out !~ /All changes applied successfully/) {
    warn "[ERROR] Cannot set password complexity\n";
    $errors ++;
}


exit(($errors > 0) ? 1 : 0);
